{"version":3,"sources":["../src/get.js"],"names":["GetData","url","option","verbose","query","page","Promise","resolve","reject","then","data","body","catch","error","GetTotalPages","json","page_size","headers","GetBulkData","totalItems","apiLimit","get","api","limit","totalRequests","dataBundle","push","all","concat","apply"],"mappings":"AAAA;;;;;;;;AASA;;AAGA;AACA;AACA;;;;;;;AACA;;;;AAMA;;AACA;;;;AAGA;;;;;;;;;;AAPA;AACA;AACA;AAaO,IAAMA,4BAAU,SAAVA,OAAU,CAAEC,GAAF,EAAOC,MAAP,EAAmB;AACzC,aAAIC,OAAJ,qCAA+CD,OAAOE,KAAP,CAAaC,IAAb,GAAoB,CAAnE,gBAAgFJ,GAAhF;AACA,QAAO,IAAIK,OAAJ,CAAa,UAAEC,OAAF,EAAWC,MAAX,EAAuB;AAC1C,qBAAKP,GAAL,EAAUC,MAAV,EACEO,IADF,CACQ;AAAA,UAAQF,QAASG,KAAKC,IAAd,CAAR;AAAA,GADR,EAEEC,KAFF,CAES;AAAA,UAASJ,OAAQK,KAAR,CAAT;AAAA,GAFT;AAGA,EAJM,CAAP;AAKA,CAPM;;AAUP;;;;;;;AAOO,IAAMC,wCAAgB,SAAhBA,aAAgB,CAAEb,GAAF,EAAW;AACvC,aAAIE,OAAJ;AACA,QAAO,IAAIG,OAAJ,CAAa,UAAEC,OAAF,EAAWC,MAAX,EAAuB;AAC1C,qBAAKP,GAAL,EAAU;AACRc,SAAM,IADE;AAERX,UAAO;AACNC,UAAM,CADA;AAENW,eAAW;AAFL;AAFC,GAAV,EAOEP,IAPF,CAOQ;AAAA,UAAQF,QAASG,KAAKO,OAAL,CAAc,gBAAd,CAAT,CAAR;AAAA,GAPR,EAQEL,KARF,CAQS;AAAA,UAASJ,OAAQK,KAAR,CAAT;AAAA,GART;AASA,EAVM,CAAP;AAWA,CAbM;;AAgBP;;;;;;;;;AASO,IAAMK,oCAAc,SAAdA,WAAc,CAAEjB,GAAF,EAAOkB,UAAP,EAA4D;AAAA,KAAzCC,QAAyC,uEAA9B,mBAASC,GAAT,GAAeC,GAAf,CAAmBC,KAAW;;AACtF,aAAIpB,OAAJ,gCAA2CgB,UAA3C;;AAEA,QAAO,IAAIb,OAAJ,CAAa,UAAEC,OAAF,EAAWC,MAAX,EAAuB;;AAE1C;AACA,MAAMgB,gBAAkBL,aAAaC,QAAf,GAA4B,CAAlD;AACA,MAAMK,aAAa,EAAnB;AACA,MAAMpB,OAAO,CAAb;;AAEA;AACA,SAAQA,QAAQmB,aAAhB,EAAgC;;AAE/BC,cAAWC,IAAX,CACC1B,QAASC,GAAT,EAAc;AACbc,UAAM,IADO;AAEbX,WAAO;AACNC,WAAMA,IADA;AAENW,gBAAWI;AAFL;AAFM,IAAd,CADD;;AAUA;AACAf;AACA;;AAEDC,UAAQqB,GAAR,CAAaF,UAAb,EACEhB,IADF,CACQ;AAAA,UAAQF,QAAS,GAAGqB,MAAH,CAAUC,KAAV,CAAgB,EAAhB,EAAoBnB,IAApB,CAAT,CAAR;AAAA,GADR,EAEEE,KAFF,CAES;AAAA,UAASJ,OAAQK,KAAR,CAAT;AAAA,GAFT;AAIA,EA5BM,CAAP;AA8BA,CAjCM","file":"get.js","sourcesContent":["/***************************************************************************************************************************************************************\n *\n * gotdata.js\n *\n * GotData -\n *\n **************************************************************************************************************************************************************/\n\n\n'use strict';\n\n\n// -------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Dependencies\n// -------------------------------------------------------------------------------------------------------------------------------------------------------------\nimport Got         from 'got';\n\n\n// -------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Local\n// -------------------------------------------------------------------------------------------------------------------------------------------------------------\nimport { Log }      from './helper';\nimport { SETTINGS } from './settings';\n\n\n/**\n * GetData - Gets data body from a url\n *\n * @type   {String} url        - The URL to get data from\n * @type   {Object} option     - The options from the https://github.com/sindresorhus/got\n *\n * @return {Promise}           - The data body\n */\nexport const GetData = ( url, option ) => {\n\tLog.verbose( `GetData       - Serving meal #${ option.query.page + 1 } from: ${ url }.` );\n\treturn new Promise( ( resolve, reject ) => {\n\t\tGot( url, option )\n\t\t\t.then( data => resolve( data.body ) )\n\t\t\t.catch( error => reject( error ) );\n\t});\n}\n\n\n/**\n * GetTotalPages - Does a small request to get the total data items ( x-result-total )\n *\n * @type   {String} url - The URL to get data from\n *\n * @return {Promise}    - The total number of data items\n */\nexport const GetTotalPages = ( url ) => {\n\tLog.verbose( `GetTotalPages - Counting the number of meals.` );\n\treturn new Promise( ( resolve, reject ) => {\n\t\tGot( url, {\n\t\t\t\tjson: true,\n\t\t\t\tquery: {\n\t\t\t\t\tpage: 0,\n\t\t\t\t\tpage_size: 1\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then( data => resolve( data.headers[ 'x-result-total' ] ) )\n\t\t\t.catch( error => reject( error ) );\n\t});\n}\n\n\n/**\n * GetBulkData - Gets a lot of data from a url\n *\n * @type   {String} url        - The URL to get data from\n * @type   {Number} totalItems - The total number of items to get data for\n * @type   {Number} apiLimit   - The number of items that can be requested\n *\n * @return {Promise}           - The data from all of the requests\n */\nexport const GetBulkData = ( url, totalItems, apiLimit = SETTINGS.get().api.limit ) => {\n\tLog.verbose( `GetBulkData   - Searching ${ totalItems } meals for tasty treats` );\n\n\treturn new Promise( ( resolve, reject ) => {\n\n\t\t// Get total requests and remove decimal\n\t\tconst totalRequests = ( totalItems / apiLimit ) | 0;\n\t\tconst dataBundle = [];\n\t\tlet   page = 0;\n\n\t\t// Iterate through all the pages\n\t\twhile ( page <= totalRequests ) {\n\n\t\t\tdataBundle.push(\n\t\t\t\tGetData( url, {\n\t\t\t\t\tjson: true,\n\t\t\t\t\tquery: {\n\t\t\t\t\t\tpage: page,\n\t\t\t\t\t\tpage_size: apiLimit\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t)\n\n\t\t\t// Increase page number\n\t\t\tpage++;\n\t\t}\n\n\t\tPromise.all( dataBundle )\n\t\t\t.then( data => resolve( [].concat.apply([], data ) ) )\n\t\t\t.catch( error => reject( error ) );\n\n\t})\n\n}\n\n"]}